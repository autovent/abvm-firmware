on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1.2.0

      # Runs a single command using the runners shell
      - name: Setup dependencies
        run: |
          pip install wheel
          pip install platformio
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Build
        run: |
          pio run
          mkdir abvm-firmware
          cp .pio/build/abvm-v1-f303-release/firmware.bin abvm-release-${{ steps.get_version.outputs.VERSION }}.bin
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./abvm-release-${{ steps.get_version.outputs.VERSION }}.bin
          asset_name: abvm-release-${{ steps.get_version.outputs.VERSION }}.bin
          asset_content_type: application/binary
      - name: Check out my other private repo
        uses: actions/checkout@master
        with:
          repository: autovent/update
          path: update
      - name: Push to private repo
        run: | 
          export repo_root=`pwd`
          echo "repo1_root: ${repo1_root}"
          cd $GITHUB_WORKSPACE/update
          cp $repo_root/*.bin resources/firmwares
          git add --all
          git config user.email "autovent-bot@autovent.org"
          git config user.name "autovent-bot"
          git commit -m ".firmware update --- Updated firmware to lates"
          git push


